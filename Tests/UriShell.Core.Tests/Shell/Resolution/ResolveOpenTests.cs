using System;
using System.Linq;

using Autofac.Features.Indexed;

using Microsoft.VisualStudio.TestTools.UnitTesting;

using NSubstitute;

using UriShell.Logging;
using UriShell.Shell.Events;
using UriShell.Shell.Registration;
using UriShell.Tests;

namespace UriShell.Shell.Resolution
{
	[TestClass]
	public class ResolveOpenTests
	{
		private IUriResolvedObjectHolder _uriResolvedObjectHolder;
		private IUriResolutionCustomization _uriResolutionCustomization;
		private IUriModuleItemResolver _uriModuleItemResolver;
		private IResolveSetupFactory _resolveSetupFactory;
		private IEventBroadcaster _eventBroadcaster;
		private ILogSession _logSession;
		private IUriDisconnectTable _uriDisconnectTable;

		private ResolveOpen CreateTestObject(Uri uri, params object[] attachments)
		{
			return new ResolveOpen(
				uri,
				attachments,
				this._resolveSetupFactory,
				this._uriResolvedObjectHolder,
				this._uriDisconnectTable,
				this._uriResolutionCustomization,
				this._eventBroadcaster,
				this._logSession);
		}

		[TestInitialize]
		public void Initialize()
		{
			this._uriResolvedObjectHolder = Substitute.For<IUriResolvedObjectHolder>();
			this._uriResolutionCustomization = Substitute.For<IUriResolutionCustomization>();
			this._uriModuleItemResolver = Substitute.For<IUriModuleItemResolver>();
			this._resolveSetupFactory = Substitute.For<IResolveSetupFactory>();
			this._eventBroadcaster = Substitute.For<IEventBroadcaster>();
			this._logSession = Substitute.For<ILogSession>();
			this._uriDisconnectTable = Substitute.For<IUriDisconnectTable>();

			IUriModuleItemResolver uriModuleResolverStub;
			var uriModuleResolverIndex = Substitute.For<IIndex<UriModuleItemResolverKey, IUriModuleItemResolver>>();

			uriModuleResolverIndex
				.TryGetValue(new UriModuleItemResolverKey("module", "item"), out uriModuleResolverStub)
				.Returns(
					x =>
					{
						x[1] = this._uriModuleItemResolver;
						return true;
					});

			var anyPlacementResolver = Substitute.For<IUriPlacementResolver>();
			anyPlacementResolver.Resolve(null, null, null).ReturnsForAnyArgs(Substitute.For<IUriPlacementConnector>());

			this._uriResolutionCustomization.ModuleItemResolvers.Returns(uriModuleResolverIndex);
			this._uriResolutionCustomization.PlacementResolvers.Returns(Enumerable.Repeat(anyPlacementResolver, 1));
		}

		[TestMethod]
		public void ResolvesUriModuleItem()
		{
			var uriModuleResolver1 = Substitute.For<IUriModuleItemResolver>();
			var uriModuleResolver2 = Substitute.For<IUriModuleItemResolver>();
			var uriModuleResolverIndex = Substitute.For<IIndex<UriModuleItemResolverKey, IUriModuleItemResolver>>();
			
			IUriModuleItemResolver uriModuleResolverStub;
			uriModuleResolverIndex
				.TryGetValue(new UriModuleItemResolverKey("module", "item"), out uriModuleResolverStub)
				.Returns(
					x =>
					{
						x[1] = uriModuleResolver1;
						return true;
					});
			uriModuleResolverIndex
				.TryGetValue(new UriModuleItemResolverKey("module2", "item2"), out uriModuleResolverStub)
				.Returns(
					x =>
					{
						x[1] = uriModuleResolver2;
						return true;
					});

			this._uriResolutionCustomization.ModuleItemResolvers.Returns(uriModuleResolverIndex);

			var uri = new Uri("tst://tab/module/item");
			this.CreateTestObject(uri).OpenOrThrow();

			uriModuleResolver1.Received(1).Resolve(uri, Arg.Any<UriAttachmentSelector>());
			uriModuleResolver2.DidNotReceive().Resolve(uri, Arg.Any<UriAttachmentSelector>());
		}

		[TestMethod]
		public void ThrowsExceptionWhenDoesntResolveUriModuleItem()
		{
			var uriModuleResolverIndex = Substitute.For<IIndex<UriModuleItemResolverKey, IUriModuleItemResolver>>();

			IUriModuleItemResolver uriModuleResolverStub;
			uriModuleResolverIndex
				.TryGetValue(Arg.Any<UriModuleItemResolverKey>(), out uriModuleResolverStub)
				.Returns(false);

			this._uriResolutionCustomization.ModuleItemResolvers.Returns(uriModuleResolverIndex);

			var uri = new Uri("tst://tab/module/item");
			var resolveOpen = this.CreateTestObject(uri);

			ExceptionAssert.Throws<UriResolutionException>(
				ex => ex.Message.Contains(typeof(IUriModuleItemResolver).Name),
				() => resolveOpen.OpenOrThrow());
		}

		[TestMethod]
		public void ResolvesUriPlacementAndConnects()
		{
			var resolved = new object();

			this._uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

			var uriPlacementConnector = Substitute.For<IUriPlacementConnector>();
			
			var uriPlacementResolver1 = Substitute.For<IUriPlacementResolver>();
			uriPlacementResolver1
				.Resolve(resolved, Arg.Is<Uri>(u => new PhoenixUriBuilder(u).Placement == "tab"), Arg.Any<UriAttachmentSelector>())
				.Returns(uriPlacementConnector);

			var uriPlacementResolver2 = Substitute.For<IUriPlacementResolver>();
			uriPlacementResolver2
				.Resolve(resolved, Arg.Any<Uri>(), Arg.Any<UriAttachmentSelector>())
				.Returns((IUriPlacementConnector)null);

			this._uriResolutionCustomization.PlacementResolvers.Returns(new[] { uriPlacementResolver2, uriPlacementResolver1 });

			var uri = new Uri("tst://tab/module/item");
			this.CreateTestObject(uri).OpenOrThrow();

			uriPlacementResolver1.Received(1).Resolve(resolved, uri, Arg.Any<UriAttachmentSelector>());
			uriPlacementResolver2.Received(1).Resolve(resolved, uri, Arg.Any<UriAttachmentSelector>());
			uriPlacementConnector.Received(1).Connect(resolved);
		}

		[TestMethod]
		public void ThrowsExceptionWhenDoesntResolveUriPlacement()
		{
			var resolved = new object();

			this._uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

			var uriPlacementResolver = Substitute.For<IUriPlacementResolver>();
			uriPlacementResolver.Resolve(resolved, Arg.Any<Uri>(), Arg.Any<UriAttachmentSelector>()).Returns((IUriPlacementConnector)null);

			this._uriResolutionCustomization.PlacementResolvers.Returns(Enumerable.Repeat(uriPlacementResolver, 3));

			var uri = new Uri("tst://tab/module/item");
			var resolveOpen = this.CreateTestObject(uri);

			ExceptionAssert.Throws<UriResolutionException>(
				ex => ex.Message.Contains(typeof(IUriPlacementResolver).Name),
				() => resolveOpen.OpenOrThrow());
		}

		[TestMethod]
		public void EmbedsAttachmentsIntoValidPlaceholders()
		{
			var attachmentsChecked = false;
			var attachment1 = new object();
			var attachment2 = new object();
			var attachment3 = new object();

			this._uriModuleItemResolver
				.When(r => r.Resolve(Arg.Any<Uri>(), Arg.Any<UriAttachmentSelector>()))
				.Do(x =>
					{
						var uriBuilder = new PhoenixUriBuilder((Uri)x[0]);
						var selector = (UriAttachmentSelector)x[1];

						Assert.IsTrue(uriBuilder.Parameters.Count == 3);

						Assert.AreEqual(attachment1, selector(uriBuilder.Parameters["p2"]));
						Assert.AreEqual(attachment2, selector(uriBuilder.Parameters["p1"]));
						Assert.AreEqual(attachment3, selector(uriBuilder.Parameters["p3"]));

						attachmentsChecked = true;
					});

			var uri = new Uri("tst://tab/module/item?p1={1}&p2={0}&p3={2}");
			this.CreateTestObject(uri, attachment1, attachment2, attachment3).OpenOrThrow();

			Assert.IsTrue(attachmentsChecked);
		}

		[TestMethod]
		public void DoesntEmbedAttachmentsIntoDoubleBraces()
		{
			var attachmentsChecked = false;
			var attachment1 = new object();
			var attachment2 = new object();
			var attachment3 = new object();

			this._uriModuleItemResolver
				.When(r => r.Resolve(Arg.Any<Uri>(), Arg.Any<UriAttachmentSelector>()))
				.Do(x =>
					{
						var uriBuilder = new PhoenixUriBuilder((Uri)x[0]);
						var selector = (UriAttachmentSelector)x[1];

						Assert.AreEqual("{0}", uriBuilder.Parameters["p2"]);
						Assert.AreEqual(null, selector(uriBuilder.Parameters["p2"]));

						Assert.AreEqual(attachment1, selector(uriBuilder.Parameters["p4"]));
						Assert.AreEqual(attachment2, selector(uriBuilder.Parameters["p1"]));
						Assert.AreEqual(attachment3, selector(uriBuilder.Parameters["p3"]));

						attachmentsChecked = true;
					});

			var uri = new Uri("tst://tab/module/item?p1={1}&p2={{0}}&p3={2}&p4={0}");
			this.CreateTestObject(uri, attachment1, attachment2, attachment3).OpenOrThrow();

			Assert.IsTrue(attachmentsChecked);
		}

		[TestMethod]
		public void AttachmentSelectorDoesntReturnAttachmentOutOfRange()
		{
			var attachmentsChecked = false;
			var attachment = new object();

			this._uriModuleItemResolver
				.When(r => r.Resolve(Arg.Any<Uri>(), Arg.Any<UriAttachmentSelector>()))
				.Do(x =>
					{
						var uriBuilder = new PhoenixUriBuilder((Uri)x[0]);
						var selector = (UriAttachmentSelector)x[1];

						Assert.AreEqual(attachment, selector(uriBuilder.Parameters["p2"]));
						Assert.AreEqual(null, selector(uriBuilder.Parameters["p1"]));
						Assert.AreEqual(null, selector(uriBuilder.Parameters["p3"]));
						Assert.AreEqual(null, selector("someparametervalue"));
						Assert.AreEqual(null, selector(null));

						attachmentsChecked = true;
					});

			var uri = new Uri("tst://tab/module/item?p1={1}&p2={0}&p3={2}");
			this.CreateTestObject(uri, attachment).OpenOrThrow();

			Assert.IsTrue(attachmentsChecked);
		}

		[TestMethod]
		public void LogsResolvedUri()
		{
			var resolved = new object();
			Uri resolvedUri = null;

			this._uriModuleItemResolver
				.Resolve(null, null)
				.ReturnsForAnyArgs(ci =>
				{
					resolvedUri = (Uri)ci[0];
					return resolved;
				});

			var uri = new Uri("tst://tab/module/item?at={0}");
			this.CreateTestObject(uri, 1).OpenOrThrow();

			this._logSession.Received(1).LogMessage(Arg.Is<string>(s => s.Contains(resolvedUri.ToString())));
		}

		[TestMethod]
		public void AddsResolvedToUriResolvedObjectHolder()
		{
			var resolved = new object();
			Uri resolvedUri = null;

			this._uriModuleItemResolver
				.Resolve(null, null)
				.ReturnsForAnyArgs(ci =>
					{
						resolvedUri = (Uri)ci[0];
						return resolved;
					});

			var uri = new Uri("tst://tab/module/item?at={0}");
			var disposable = this.CreateTestObject(uri, 1).OpenOrThrow();

			this._uriResolvedObjectHolder.Received(1).Add(
				resolved,
				Arg.Is<UriResolvedMetadata>(m => m.Uri == resolvedUri && m.Disposable == disposable));
		}

		[TestMethod]
		public void DisconnectsResolvedWhenUriResolvedObjectHolderRefusedAdd()
		{
			var resolved = new object();
			this._uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

			var uriPlacementConnector = Substitute.For<IUriPlacementConnector>();
			var uriPlacementResolver = Substitute.For<IUriPlacementResolver>();
			uriPlacementResolver.Resolve(null, null, null).ReturnsForAnyArgs(uriPlacementConnector);

			this._uriResolutionCustomization.PlacementResolvers.Returns(Enumerable.Repeat(uriPlacementResolver, 1));

			this._uriResolvedObjectHolder
				.WhenForAnyArgs(h => h.Add(null, default(UriResolvedMetadata)))
				.Do(ci => { throw new Exception(); });

			var uri = new Uri("tst://tab/module/item");
			var resolveOpen = this.CreateTestObject(uri);
			
			try
			{
				resolveOpen.OpenOrThrow();
			}
			catch
			{
				uriPlacementConnector.Received(1).Disconnect(resolved);
				return;
			}

			Assert.Fail();
		}

		[TestMethod]
		public void RegistersUriPlacementConnectorInUriDisconnectTable()
		{
			var resolved = new object();
			Uri resolvedUri = null;

			this._uriModuleItemResolver
				.Resolve(null, null)
				.ReturnsForAnyArgs(ci =>
				{
					resolvedUri = (Uri)ci[0];
					return resolved;
				});

			var uriPlacementConnector = Substitute.For<IUriPlacementConnector>();
			var uriPlacementResolver = Substitute.For<IUriPlacementResolver>();
			uriPlacementResolver.Resolve(null, null, null).ReturnsForAnyArgs(uriPlacementConnector);

			this._uriResolutionCustomization.PlacementResolvers.Returns(Enumerable.Repeat(uriPlacementResolver, 1));

			var uri = new Uri("tst://tab/module/item");
			this.CreateTestObject(uri).OpenOrThrow();

			this._uriDisconnectTable.Received(1)[resolved] = uriPlacementConnector;
		}

		[TestMethod]
		public void ReturnsSetupFromFactory()
		{
			var uri = new Uri("tst://tab/module/item");
			var resolveOpen = this.CreateTestObject(uri);

			var setup = Substitute.For<IShellResolveSetup<object>>();
			this._resolveSetupFactory
				.Create<object>(Arg.Is<ResolveSetupArgs>(a => a.ResolveOpen == resolveOpen))
				.Returns(setup);
			var setupFromResolve = resolveOpen.Setup<object>();

			Assert.AreSame(setup, setupFromResolve);
		}

		[TestMethod]
		public void AllowsToSetSetupPlayerOnlyOnce()
		{
			var resolved = new object();

			this._uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

			Action<ResolveSetupPlayer> playerSender = null;
			this._resolveSetupFactory
				.Create<object>(Arg.Do<ResolveSetupArgs>(a => playerSender = a.PlayerSender))
				.ReturnsForAnyArgs(Substitute.For<IShellResolveSetup<object>>());

			var uri = new Uri("tst://tab/module/item");
			this.CreateTestObject(uri).Setup<object>();
			
			var player1 = new ResolveSetupPlayer((pUri, pResolved, pLog) => Substitute.For<IDisposable>());
			var player2 = new ResolveSetupPlayer((pUri, pResolved, pLog) => Substitute.For<IDisposable>());
			
			playerSender(player1);

			ExceptionAssert.Throws<InvalidOperationException>(
				ex => ex.Message.Contains(uri.ToString()),
				() => playerSender(player2));
		}

		[TestMethod]
		public void DisallowsToSetSetupPlayerToNull()
		{
			var resolved = new object();

			this._uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

			Action<ResolveSetupPlayer> playerSender = null;
			this._resolveSetupFactory
				.Create<object>(Arg.Do<ResolveSetupArgs>(a => playerSender = a.PlayerSender))
				.ReturnsForAnyArgs(Substitute.For<IShellResolveSetup<object>>());

			var uri = new Uri("tst://tab/module/item");
			this.CreateTestObject(uri).Setup<object>();

			ExceptionAssert.Throws<InvalidOperationException>(
				ex => ex.Message.Contains(uri.ToString()),
				() => playerSender(null));
		}

		[TestMethod]
		public void PlaysSetupWithResolved()
		{
			var resolved = new object();

			this._uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

			Action<ResolveSetupPlayer> playerSender = null;
			this._resolveSetupFactory
				.Create<object>(Arg.Do<ResolveSetupArgs>(a => playerSender = a.PlayerSender))
				.ReturnsForAnyArgs(Substitute.For<IShellResolveSetup<object>>());

			var uri = new Uri("tst://tab/module/item");
			var resolveOpen = this.CreateTestObject(uri);
			
			resolveOpen.Setup<object>();

			Uri playerUri = null;
			object playerResolved = null;
			ILogSession playerLogSession = null;

			playerSender(
				(pUri, pResolved, pLog) =>
				{
					playerUri = pUri;
					playerResolved = pResolved;
					playerLogSession = pLog;

					return Substitute.For<IDisposable>();
				});

			resolveOpen.OpenOrThrow();

			Assert.AreEqual(uri, playerUri);
			Assert.AreEqual(resolved, playerResolved);
			Assert.AreEqual(this._logSession, playerLogSession);
		}

		[TestMethod]
		public void PlaysSetupAfterAddingResolvedToUriResolvedObjectHolder()
		{
			var resolved = new object();

			this._uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

			Action<ResolveSetupPlayer> playerSender = null;
			this._resolveSetupFactory
				.Create<object>(Arg.Do<ResolveSetupArgs>(a => playerSender = a.PlayerSender))
				.ReturnsForAnyArgs(Substitute.For<IShellResolveSetup<object>>());

			var uri = new Uri("tst://tab/module/item");
			var resolveOpen = this.CreateTestObject(uri);
			
			resolveOpen.Setup<object>();

			var playCount = 0;
			playerSender(
				(pUri, pResolved, pLog) =>
				{
					this._uriResolvedObjectHolder.Received().Add(pResolved, Arg.Any<UriResolvedMetadata>());
					playCount++;

					return Substitute.For<IDisposable>();
				});

			resolveOpen.OpenOrThrow();

			Assert.AreEqual(1, playCount);
		}

		[TestMethod]
		public void LogsExceptionWhenSetupPlayedWithException()
		{
			var resolved = new object();

			this._uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

			Action<ResolveSetupPlayer> playerSender = null;
			this._resolveSetupFactory
				.Create<object>(Arg.Do<ResolveSetupArgs>(a => playerSender = a.PlayerSender))
				.ReturnsForAnyArgs(Substitute.For<IShellResolveSetup<object>>());

			var uri = new Uri("tst://tab/module/item");
			var resolveOpen = this.CreateTestObject(uri);

			resolveOpen.Setup<object>();

			var exception = new InvalidOperationException(resolved.GetHashCode().ToString());
			playerSender((pUri, pResolved, pLog) => { throw exception; } );

			resolveOpen.OpenOrThrow();

			this._logSession.Received(1).LogException(exception.Message, exception);
		}

		[TestMethod]
		public void DisposesSetupPlayerResult()
		{
			var resolved = Substitute.For<IDisposable>();
			this._uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

			var uriPlacementConnector = Substitute.For<IUriPlacementConnector>();

			Action<ResolveSetupPlayer> playerSender = null;
			this._resolveSetupFactory
				.Create<object>(Arg.Do<ResolveSetupArgs>(a => playerSender = a.PlayerSender))
				.ReturnsForAnyArgs(Substitute.For<IShellResolveSetup<object>>());

			var uri = new Uri("tst://tab/module/item");
			var resolveOpen = this.CreateTestObject(uri);

			resolveOpen.Setup<object>();

			var setupDisposable = Substitute.For<IDisposable>();
			playerSender((pUri, pResolved, pLog) => setupDisposable);

			var disposeCount = 0;
			setupDisposable
				.When(d => d.Dispose())
				.Do(_ =>
				{
					resolved.DidNotReceive().Dispose();
					uriPlacementConnector.DidNotReceive().Disconnect(resolved);
					this._uriResolvedObjectHolder.DidNotReceive().Remove(resolved);

					disposeCount++;
				});

			var openDisposable = resolveOpen.OpenOrThrow();
			
			this._uriDisconnectTable[resolved].Returns(uriPlacementConnector);
			openDisposable.Dispose();

			Assert.AreEqual(1, disposeCount);
		}

		[TestMethod]
		public void DisconnectsFromUriPlacementUsingUriDisconnectTable()
		{
			var resolved = Substitute.For<IDisposable>();
			this._uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

			var uri = new Uri("tst://tab/module/item");
			var disposable = this.CreateTestObject(uri).OpenOrThrow();

			var disconnectCount = 0;
			var disconnectPlacementConnector = Substitute.For<IUriPlacementConnector>();
			
			disconnectPlacementConnector
				.When(p => p.Disconnect(resolved))
				.Do(_ =>
				{
					resolved.DidNotReceive().Dispose();
					this._uriResolvedObjectHolder.DidNotReceive().Remove(resolved);

					disconnectCount++;
				});

			this._uriDisconnectTable[resolved].Returns(disconnectPlacementConnector);

			disposable.Dispose();

			Assert.AreEqual(1, disconnectCount);
		}

		[TestMethod]
		public void RemovesResolvedFromUriDisconnectTable()
		{
			var resolved = Substitute.For<IDisposable>();
			this._uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

			var removeCount = 0;
			this._uriDisconnectTable
				.When(_ => _.Remove(resolved))
				.Do(_ =>
				{
					resolved.Received().Dispose();
					removeCount++;
				});

			var uri = new Uri("tst://tab/module/item");
			this.CreateTestObject(uri).OpenOrThrow().Dispose();

			Assert.AreEqual(1, removeCount);
		}

		[TestMethod]
		public void RemovesResolvedFromUriResolvedObjectHolder()
		{
			var resolved = Substitute.For<IDisposable>();
			this._uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

			var removeCount = 0;
			this._uriResolvedObjectHolder
				.When(_ => _.Remove(resolved))
				.Do(_ =>
				{
					resolved.Received().Dispose();
					removeCount++;
				});

			var uri = new Uri("tst://tab/module/item");
			this.CreateTestObject(uri).OpenOrThrow().Dispose();

			Assert.AreEqual(1, removeCount);
		}

		[TestMethod]
		public void DisposesDisposableResolved()
		{
			var resolved = Substitute.For<IDisposable>();
			this._uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

			var uri = new Uri("tst://tab/module/item");
			this.CreateTestObject(uri).OpenOrThrow().Dispose();

			resolved.Received(1).Dispose();
		}

		[TestMethod]
		public void LogsExceptionWhenOpenDisposeCausedException()
		{
			var resolved = new object();
			this._uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

			var exception = new Exception(resolved.GetHashCode().ToString());
			this._uriResolvedObjectHolder
				.WhenForAnyArgs(h => h.Remove(null))
				.Do(_ => { throw exception; });

			var uri = new Uri("tst://tab/module/item");
			this.CreateTestObject(uri).OpenOrThrow().Dispose();

			this._logSession.Received(1).LogException(exception.Message, exception);
		}

		[TestMethod]
		public void BroadcastsRefreshToResolved()
		{
			var uri = new Uri("tst://tab/module/item");
			var metadata = new UriResolvedMetadata(uri, null).AssignId(1);

			this._uriResolvedObjectHolder
				.GetMetadata(null)
				.ReturnsForAnyArgs(metadata);

			var resolveOpen = this.CreateTestObject(uri);
			resolveOpen.OpenOrThrow();

			this._eventBroadcaster
				.Received(1)
				.Send(
					ShellEventKeys.RefreshResolved, 
					Arg.Is<ResolvedIdBroadcastArgs>(e => e.ResolvedId == metadata.ResolvedId));
		}

		[TestMethod]
		public void DoesntBroadcastRefreshToResolvedWhenUriPlacementConnectorIsResponsibleForRefresh()
		{
			var resolved = new object();
			this._uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

			var uriPlacementConnector = Substitute.For<IUriPlacementConnector>();
			uriPlacementConnector.IsResponsibleForRefresh.Returns(true);

			var uriPlacementResolver = Substitute.For<IUriPlacementResolver>();
			uriPlacementResolver.Resolve(null, null, null).ReturnsForAnyArgs(uriPlacementConnector);

			this._uriResolutionCustomization.PlacementResolvers.Returns(Enumerable.Repeat(uriPlacementResolver, 1));

			var resolveOpen = this.CreateTestObject(new Uri("tst://tab/module/item"));
			resolveOpen.OpenOrThrow();

			this._eventBroadcaster
				.DidNotReceive()
				.Send(ShellEventKeys.RefreshResolved, Arg.Any<ResolvedIdBroadcastArgs>());
		}
	}
}