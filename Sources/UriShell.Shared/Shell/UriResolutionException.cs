using System;
using System.Diagnostics.Contracts;
using System.Runtime.Serialization;

namespace UriShell.Shell
{
	/// <summary>
	/// Exception generated by the shell when a URI being opened is invalid.
	/// </summary>
	[Serializable]
	public class UriResolutionException : Exception
	{
		/// <summary>
		/// The key for storing <see cref="Uri"/> in the serialized data.
		/// </summary>
		private const string UriSerializationName = "URI";

		/// <summary>
		/// The invalid URI.
		/// </summary>
		private readonly Uri _uri;

		/// <summary>
		/// Initializes a new instance of the class <see cref="UriResolutionException"/>
		/// with the given error message and invalid URI.
		/// </summary>
		/// <param name="uri">The invalid URI.</param>
		/// <param name="message">The error message.</param>
		public UriResolutionException(Uri uri, string message)
			: base(message)
		{
			this._uri = uri;
		}

		/// <summary>
		/// Initializes a new instance of the class <see cref="UriResolutionException"/>
		/// with the given error message, the invalid URI and the inner exception that is a reason 
		/// of the current exception.
		/// </summary>
		/// <param name="uri">The invalid URI.</param>
		/// <param name="message">The error message.</param>
		/// <param name="innerException">The inner exception that is a reason 
		/// of the current exception.</param>
		public UriResolutionException(Uri uri, string message, Exception innerException)
			: base(message, innerException)
		{
			this._uri = uri;
		}

		/// <summary>
		/// Initializes a new instance of the  class <see cref="UriResolutionException"/> with the 
		/// specified serialization and context information.
		/// </summary>
		/// <param name="info">The data for serializing or deserializing the object.</param>
		/// <param name="context">The source and destination for the object.</param>
		protected UriResolutionException(SerializationInfo info, StreamingContext context)
			: base(info, context)
		{
			this._uri = (Uri)info.GetValue(UriResolutionException.UriSerializationName, typeof(Uri));
		}

		/// <summary>
		/// Describes the invariant of the class.
		/// </summary>
		[ContractInvariantMethod]
		private void ContractInvariant()
		{
			Contract.Invariant(this.Uri != null);
		}

		/// <summary>
		/// Sets the <see cref="SerializationInfo"/> with information about the exception.  
		/// </summary>
		/// <param name="info">The <see cref="SerializationInfo"/>that holds the serialized 
		/// object data about the exception being thrown.</param>
		/// <param name="context">The <see cref="StreamingContext"/>that contains 
		/// contextual information about the source or destination.</param>
		public override void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Contract.Requires<ArgumentNullException>(info != null);

			base.GetObjectData(info, context);

			info.AddValue(UriResolutionException.UriSerializationName, this._uri, typeof(Uri));
		}

		/// <summary>
		/// Gets the invalid URI.
		/// </summary>
		public Uri Uri
		{
			get
			{
				return this._uri;
			}
		}

		/// <summary>
		/// Gets the error message. 
		/// </summary>
		public override string Message
		{
			get
			{
				var uriInfo = string.Format(Properties.Resources.UriResolutionExceptionUri, this.Uri);

				return string.Format("{0}{1}{2}", base.Message, Environment.NewLine, uriInfo);
			}
		}
	}
}
